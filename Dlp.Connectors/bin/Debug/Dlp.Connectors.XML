<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dlp.Connectors</name>
    </assembly>
    <members>
        <member name="F:Dlp.Connectors.CacheConnector._callingAssembly">
            <summary>
            Armazena o nome da aplicação que esta chamando o serviço de cache.
            </summary>
        </member>
        <member name="F:Dlp.Connectors.CacheConnector._bufferSize">
            <summary>
            Obtém ou define o tamanho do buffer a ser utilizado na comunicação com o serviço de cache.
            </summary>
        </member>
        <member name="P:Dlp.Connectors.CacheConnector.ServerAddress">
            <summary>
            Obtém o endereço do servidor de cache.
            </summary>
        </member>
        <member name="P:Dlp.Connectors.CacheConnector.Port">
            <summary>
            Obtém a porta de conexão na qual o cache será disponibilizado.
            </summary>
        </member>
        <member name="P:Dlp.Connectors.CacheConnector.AccessKey">
            <summary>
            Obtém a chave de acesso ao serviço de cache.
            </summary>
        </member>
        <member name="F:Dlp.Connectors.CacheConnector.Handler">
            <summary>
            Obtém o socket utilizado para se comunicar com o serviço de cache.
            </summary>
        </member>
        <member name="M:Dlp.Connectors.CacheConnector.Connect">
            <summary>
            Connects to the cache service.
            </summary>
        </member>
        <member name="M:Dlp.Connectors.CacheConnector.IsConnected">
            <summary>
            Checks if the cache service is connected.
            </summary>
            <returns>Returns true if we are connected to the cache service.</returns>
        </member>
        <member name="M:Dlp.Connectors.CacheConnector.Disconnect">
            <summary>
            Disconnects from the cache service.
            </summary>
        </member>
        <member name="M:Dlp.Connectors.CacheConnector.Set``1(System.String,``0,System.Int32)">
            <summary>
            Adiciona um atualiza um item existente no cache.
            </summary>
            <typeparam name="T">Tipo do item a ser inserido/atualziado.</typeparam>
            <param name="key">Nome único no cache.</param>
            <param name="item">Objeto a ser inserido/atualizado.</param>
            <param name="itemExpirationInMinutes">Quanto tempo o item deverá permanecer no cache.</param>
            <returns>Retorna true caso a operação seja realizada com sucesso.</returns>
        </member>
        <member name="M:Dlp.Connectors.CacheConnector.GetByKey``1(System.String)">
            <summary>
            Obtém um item do cache a partir do nome.
            </summary>
            <typeparam name="T">Tipo do objeto a ser retornado.</typeparam>
            <param name="key">Nome do objeto no cache.</param>
            <returns>Retorna um objeto do tipo T, encontrado no cache, ou default(T), caso o item não exista.</returns>
        </member>
        <member name="M:Dlp.Connectors.CacheConnector.CreateBinaryRequest``1(Dlp.Connectors.CacheConnector.CacheOperationType,System.String,System.Object,System.Int32)">
            <summary>
            Prepara o CacheItem para ser enviado para o serviço de cache.
            </summary>
            <param name="cacheOperationType">Objeto a ser preparado.</param>
            <param name="key"></param>
            <param name="item"></param>
            <param name="itemExpirationInMinutes"></param>
            <returns></returns>
        </member>
        <member name="F:Dlp.Connectors.CacheConnector.CacheOperationType.Set">
            <summary>
            Operação de inserção ou atualização de um item no cache.
            </summary>
        </member>
        <member name="F:Dlp.Connectors.CacheConnector.CacheOperationType.GetByKey">
            <summary>
            Operação de leitura de um item do cache.
            </summary>
        </member>
        <member name="F:Dlp.Connectors.CacheConnector.CacheOperationType.GetByType">
            <summary>
            Operação de leitura de todos os itens de um tipo específico.
            </summary>
        </member>
        <member name="F:Dlp.Connectors.CacheConnector.CacheOperationType.Delete">
            <summary>
            Operação de exclusão de um item do cache.
            </summary>
        </member>
        <member name="T:Dlp.Connectors.ColumnMapperAttribute">
            <summary>
            This class specifies wich column from a table must be mapped to the specified Property. Supported the BulkInsert method only.
            </summary>
        </member>
        <member name="P:Dlp.Connectors.ColumnMapperAttribute.ColumnName">
            <summary>
            Name of the column that is going to receive the value from this property.
            </summary>
        </member>
        <member name="M:Dlp.Connectors.ColumnMapperAttribute.#ctor">
            <summary>
            Specifies the mapping options for this Property.
            </summary>
        </member>
        <member name="M:Dlp.Connectors.ColumnMapperAttribute.#ctor(System.String)">
            <summary>
            Specifies the mapping options for this Property. 
            </summary>
            <param name="columnName">Name of the column that is going to receive the value from this property.</param>
        </member>
        <member name="T:Dlp.Connectors.DatabaseConnector">
            <summary>
            Connector for database operations.
            </summary>
        </member>
        <member name="M:Dlp.Connectors.DatabaseConnector.#ctor(System.Int32)">
            <summary>
            Initializes an instance of the DatabaseConnector. A SqlTransaction must be running.
            </summary>
            <param name="commandTimeoutInSeconds">Limit time, in seconds, that an operation may take to be completed.</param>
            <exception cref="T:System.InvalidOperationException">Start a database transaction with DatabaseConnector.BeginTransaction, prior using this constructor.</exception>
        </member>
        <member name="M:Dlp.Connectors.DatabaseConnector.#ctor(System.String,System.Int32)">
            <summary>
            Initializes an instance of the DatabaseConnector.
            </summary>
            <param name="connectionString">Database ConnectionString to be used by the connector. Ignored if a DatabaseTransaction is already running.</param>
            <param name="commandTimeoutInSeconds">Limit time, in seconds, that an operation may take to be completed.</param>
            <exception cref="T:System.ArgumentNullException">The connectionString parameter must have a value.</exception>
        </member>
        <member name="M:Dlp.Connectors.DatabaseConnector.Finalize">
            <summary>
            Destrutor que fechará os recursos utilizados, caso o usuário não tenha fechado explicitamente.
            </summary>
        </member>
        <member name="P:Dlp.Connectors.DatabaseConnector.Connection">
            <summary>
            Gets the database connection used by this instance.
            </summary>
        </member>
        <member name="P:Dlp.Connectors.DatabaseConnector.Transaction">
            <summary>
            Gets or sets the current database transaction.
            </summary>
        </member>
        <member name="P:Dlp.Connectors.DatabaseConnector.CommandTimeoutInSeconds">
            <summary>
            Gets the database operation timeout. Default: 90 seconds.
            </summary>
        </member>
        <member name="M:Dlp.Connectors.DatabaseConnector.OpenConnection">
            <summary>
            Abre a conexão com o banco de dados.
            </summary>
        </member>
        <member name="M:Dlp.Connectors.DatabaseConnector.SqlCommandFactory(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Int32)">
            <summary>
            Cria um objeto IDbCommand apropriado para o tipo de conexão especificada.
            </summary>
            <param name="query">Query a ser executada no banco de dados.</param>
            <param name="connection">Objeto de conexão com o banco de dados.</param>
            <param name="transaction">Transação de banco de dados.</param>
            <param name="commandTimeoutInSeconds">Timeout da operação do banco de dados.</param>
            <returns>Retorna um objeto IDbCommand apropriado para o tipo de conexão especificada.</returns>
        </member>
        <member name="M:Dlp.Connectors.DatabaseConnector.CleanQuery(System.String)">
            <summary>
            Remove dados desnecessários da query, para que a quantidade de informações enviadas para o servidor seja reduzida.
            </summary>
            <param name="query">Query a ser tratada.</param>
            <returns>Retorna a query tratada.</returns>
        </member>
        <member name="M:Dlp.Connectors.DatabaseConnector.ExecuteScalar``1(System.String,System.Object)">
            <summary>
            Executes the query and returns the first column from the first row returned by the query. Additional columns or rows are ignored.
            </summary>
            <typeparam name="T">Type of the object instance to be returned.</typeparam>
            <param name="query">Query to be executed. The parameter is mandatory.</param>
            <param name="parameters">Query parameters, as a dynamic object, following the format: new {Param1 = value1, Param2 = value2, ...}.</param>
            <returns>Returns a typed object with the found value. If no data is found, default(T) is returned.</returns>
            <exception cref="T:System.ArgumentNullException">Missing the query parameter.</exception>
            <exception cref="T:System.InvalidCastException" />
            <exception cref="T:System.Data.SqlClient.SqlException" />
            <exception cref="T:System.IO.IOException" />
            <exception cref="T:System.InvalidOperationException" />
            <exception cref="T:System.ObjectDisposedException" />
            <example>
      <para>The following example shows how to get the current database server time with ExecuteScalar, already mapped to a DateTime object.</para>
      <code lang="C#">
        // Query to retrieve the database local time.
        string query = @"SELECT GETDATE();";

        DateTime currentDatabaseTime;

        // Instantiate the database connector.
        using (DatabaseConnector databaseConnector = new DatabaseConnector(connectionString)) {
        
          // Executes the query and return the result as a DateTime object.
          currentDatabaseTime = databaseConnector.ExecuteScalar&lt;DateTime&gt;(query);
        }
      </code>
      <para>The following example shows how to get a simple value with query parameters.</para>
      <code lang="C#">
        // Query to retrieve a merchant name given its Id.
        string query = @"SELECT Name FROM Merchant WHERE MerchantId = @MerchantId;";

        string merchantName;

        // Instantiate the database connector.
        using (DatabaseConnector databaseConnector = new DatabaseConnector(connectionString)) {

          // Executes the query and return the result as a string object.
          merchantName = databaseConnector.ExecuteScalar&lt;string&gt;(query, new { MerchantId = 1});
        }
      </code>
      <para>The following example shows how to insert a row and return the database generated Id.</para>
      <code lang="C#">
        // Query to insert a new merchant to database.
        string query = @"INSERT INTO Merchant (MerchantName) OUTPUT INSERTED.MerchantId VALUES (@MerchantName);";

        int insertedMerchantId;

        // Instantiate the database connector.
        using (DatabaseConnector databaseConnector = new DatabaseConnector(connectionString)) {

          // Executes the query and return the database generated Id.
          insertedMerchantId = databaseConnector.ExecuteScalar&lt;int&gt;(query, new { MerchantName = "New Merchant"});
        }
      </code>
    </example>
        </member>
        <member name="M:Dlp.Connectors.DatabaseConnector.ExecuteNonQuery(System.String,System.Object)">
            <summary>
            Executes the specified query and returns the number of rows affected.
            </summary>
            <param name="query">Query to be executed. The parameter is mandatory.</param>
            <param name="parameters">Query parameters, as a dynamic object, following the format: new {Param1 = value1, Param2 = value2, ...}.</param>
            <returns>Returns the number of rows affected.</returns>
            <exception cref="T:System.ArgumentNullException">Missing the query parameter.</exception>
            <exception cref="T:System.InvalidCastException" />
            <exception cref="T:System.Data.SqlClient.SqlException" />
            <exception cref="T:System.IO.IOException" />
            <exception cref="T:System.InvalidOperationException" />
            <exception cref="T:System.ObjectDisposedException" />
            <example>
      <para>The following example shows how to update a row using the ExecuteNonQuery method.</para>
      <code lang="C#">
        // Query to update the merchant name.
        string query = @"UPDATE Merchant SET MerchantName = @MerchantName WHERE MerchantId = @MerchantId;";

        // Instantiate the database connector.
        using (DatabaseConnector databaseConnector = new DatabaseConnector(connectionString)) {
          
          // Updates the merchant data.
          databaseConnector.ExecuteNonQuery(query, new { MerchantName = "New Merchant Name", MerchantId = 1 });
        }
      </code>
      <para>The following example shows how to use an entity to update its value in database.</para>
      <code lang="C#">
        // Query to update the merchant name.
        string query = @"UPDATE Merchant SET MerchantName = @MerchantName WHERE MerchantId = @MerchantId;";

        // Instantiate a class containing the data to be updated.
        MerchantData merchantData = new MerchantData();

        // Set the merchant name to be saved to database.
        merchantData.MerchantName = "New Merchant Name";

        // Set the id of the row to be updated.
        merchantData.MerchantId = 1;

        // Instantiate the database connector.
        using (DatabaseConnector databaseConnector = new DatabaseConnector(connectionString)) {

          // Updates the merchant data.
          merchantName = databaseConnector.ExecuteNonQuery(query, merchantData);
        }
      </code>
    </example>
        </member>
        <member name="M:Dlp.Connectors.DatabaseConnector.ExecuteReader``1(System.String,System.Int32,System.Int32,System.String,Dlp.Connectors.SortDirection,System.Object)">
            <summary>
            Sends the query to be executed by the database and return a KeyValuePair with the number of available rows and the retrieved data for the specified page.
            </summary>
            <typeparam name="T">Type of the object instance to be returned.</typeparam>
            <param name="query">Query to be executed. The parameter is mandatory.</param>
            <param name="pageNumber">Page to be returned.</param>
            <param name="pageSize">Number of rows per page.</param>
            <param name="orderByColumnName">Column name to ot used to order the retrieved data.</param>
            <param name="sortDirection">Sorting direction.</param>
            <param name="parameters">Query parameters, as a dynamic object, following the format: new {Param1 = value1, Param2 = value2, ...}.</param>
            <returns>Returns a KeyValuePair where Key = Number of rows available in database and Value = Data of type T returned for current page number.</returns>
            <exception cref="T:System.ArgumentNullException">Missing the query or the orderByColumnName parameter.</exception>
            <example>
      <para>The following example shows how to use the ExecuteReader to get a list of transactions for a paged view.</para>
      <code lang="C#">
        // Set the page to be returned.
        int pageNumber = 2;

        // Set the number of rows per page.
        int pageSize = 5;

        // Set the dates for search the current day.
        DateTime searchStartDate = DateTime.Now.Date;
        DateTime searchEndDate = DateTime.Now.Date.AddDays(1);

        // Query to load transactions.
        string query = @"SELECT TransactionId, AmountInCents FROM Transaction WHERE CreateDate &gt;= @SearchStartDate AND CreateDate &lt; @SearchEndDate;";

        KeyValuePair&lt;int, IEnumerable&lt;Transaction&gt;&gt; result;

        // Instantiate the database connector.
        using (DatabaseConnector databaseConnector = new DatabaseConnector(connectionString)) {

          // Return a list of transactions, sorted by the CreateDate column in descending order.
          result = databaseConnector.ExecuteReader&lt;Transaction&gt;(
            query, pageNumber, pageSize, "CreateDate", SortDirection.DESC, new { SearchStartDate = searchStartDate, SearchEndDate = searchEndDate });
        }

        Console.WriteLine("Number of available transactions: " + result.Key);
        Console.WriteLine(string.Format("Transactions for page {0}:", pageNumber));

        foreach (Transaction transaction in result.Value) {
          Console.WriteLine(string.Format("TransactionId: {0}, Amount: {1}", transaction.TransactionId, transaction.AmountInCents));
        }

        /**
         * Output:
         * Number of available transactions: 32
         * Transactions for page 2:
         * TransactionId: 6, Amount: 4500
         * TransactionId: 7, Amount: 2290
         * TransactionId: 8, Amount: 1850
         * TransactionId: 9, Amount: 3990
         * TransactionId: 10, Amount: 6200
         **/
      </code>
    </example>
        </member>
        <member name="M:Dlp.Connectors.DatabaseConnector.ExecuteReader``1(System.String,System.Object)">
            <summary>
            Sends the query to be executed by the database and return a collection of type T containing all records. Has the same effect as ExecuteReaderFetchAll.
            </summary>
            <typeparam name="T">Type of the object instance to be returned.</typeparam>
            <param name="query">Query to be executed. The parameter is mandatory.</param>
            <param name="parameters">Query parameters, as a dynamic object, following the format: new {Param1 = value1, Param2 = value2, ...}.</param>
            <returns>Returns a list of type T with the retrieved data.</returns>
            <exception cref="T:System.ArgumentNullException">Missing the query parameter.</exception>
            <exception cref="T:System.InvalidCastException" />
            <exception cref="T:System.Data.SqlClient.SqlException" />
            <exception cref="T:System.IO.IOException" />
            <exception cref="T:System.InvalidOperationException" />
            <exception cref="T:System.ObjectDisposedException" />
            <example>
      <para>The following example shows how to use the ExecuteReader method to get a list of rows.</para>
      <code lang="C#">
        // Query to load transactions.
        string query = @"SELECT TransactionId, AmountInCents FROM Transaction WHERE CreateDate &gt;= @SearchStartDate AND CreateDate &lt; @SearchEndDate;";

        // Instantiate the database connector.
        using (DatabaseConnector databaseConnector = new DatabaseConnector(connectionString)) {

          // Return a list of transactions, sorted by the CreateDate column in descending order.
          IEnumerable&lt;Transaction&gt; result = databaseConnector.ExecuteReader&lt;Transaction&gt;(query, new { SearchStartDate = searchStartDate, SearchEndDate = searchEndDate });
        }
      </code>
      <para>The following example shows how to load data with inner join to fill an entity.</para>
      <code lang="C#">
        // Query to load MerchantData.
        string query = @"SELECT Merchant.MerchantId, Merchant.MerchantName, MerchantConfiguration.IsEnabled, MerchantConfiguration.MerchantDomain
                         FROM Merchant
                         INNER JOIN MerchantConfiguration ON Merchant.MerchantId = MerchantConfiguration.MerchantId";

        IEnumerable&lt;MerchantData&gt; result;
        
        // Instantiate the database connector.
        using (DatabaseConnector databaseConnector = new DatabaseConnector(connectionString)) {

          // Get the merchant data.
          result = databaseConnector.ExecuteReader&lt;MerchantData&gt;(query);
        }
        
        // Parse each row returned.
        foreach (MerchantData merchantData in result) {
        
          int merchantId = merchantData.MerchantId;
          string merchantName = merchantData.MerchantName;
          
          // The property MerchantConfiguration is populated automatically.
          
          bool isEnabled = merchantData.MerchantConfiguration.IsEnabled;
          string domain = merchantData.MerchantConfiguration.MerchantDomain;
          
          .
          .
          .
        }
      </code>
      <para>The following example shows how to load data with a collection as parameter for an 'IN' clause.</para>
      <code lang="C#">
        // Query to load MerchantData.
        string query = @"SELECT Name FROM Merchant WHERE MerchantKey IN (@MerchantKeyCollection)";

        // A collection to be used as the query MerchantKeyCollection parameter.
        IEnumerable&lt;Guid&gt; merchantKeyCollection = new Guid[] { Guid.Parse("fee2437e-c810-4c2b-a836-5f619f80bb76"), Guid.Parse("c5d66001-8a39-4a04-a22c-d3a190018c46") };

        IEnumerable&lt;MerchantData&gt; result;
        
        // Instantiate the database connector.
        using (DatabaseConnector databaseConnector = new DatabaseConnector(connectionString)) {

          // Get the merchant data.
          result = databaseConnector.ExecuteReader&lt;MerchantData&gt;(query, new { MerchantKeyCollection = merchantKeyCollection });
        }
      </code>
    </example>
        </member>
        <member name="M:Dlp.Connectors.DatabaseConnector.ExecuteReaderFetchAll``1(System.String,System.Object)">
            <summary>
            Sends the query to be executed by the database and return a collection of type T containing all records
            </summary>
            <typeparam name="T">Type of the object instance to be returned.</typeparam>
            <param name="query">Query to be executed. The parameter is mandatory.</param>
            <param name="parameters">Query parameters, as a dynamic object, following the format: new {Param1 = value1, Param2 = value2, ...}.</param>
            <returns>Returns a list of type T with the retrieved data.</returns>
            <exception cref="T:System.ArgumentNullException">Missing the query parameter.</exception>
            <exception cref="T:System.InvalidCastException" />
            <exception cref="T:System.Data.SqlClient.SqlException" />
            <exception cref="T:System.IO.IOException" />
            <exception cref="T:System.InvalidOperationException" />
            <exception cref="T:System.ObjectDisposedException" />
            <example>
      <para>The following example shows how to use the ExecuteReader method to get a list of rows.</para>
      <code lang="C#">
        // Query to load transactions.
        string query = @"SELECT TransactionId, AmountInCents FROM Transaction WHERE CreateDate &gt;= @SearchStartDate AND CreateDate &lt; @SearchEndDate;";

        // Instantiate the database connector.
        using (DatabaseConnector databaseConnector = new DatabaseConnector(connectionString)) {

          // Return a list of transactions, sorted by the CreateDate column in descending order.
          IEnumerable&lt;Transaction&gt; result = databaseConnector.ExecuteReader&lt;Transaction&gt;(query, new { SearchStartDate = searchStartDate, SearchEndDate = searchEndDate });
        }
      </code>
      <para>The following example shows how to load data with inner join to fill an entity.</para>
      <code lang="C#">
        // Query to load MerchantData.
        string query = @"SELECT Merchant.MerchantId, Merchant.MerchantName, MerchantConfiguration.IsEnabled, MerchantConfiguration.MerchantDomain
                         FROM Merchant
                         INNER JOIN MerchantConfiguration ON Merchant.MerchantId = MerchantConfiguration.MerchantId";

        IEnumerable&lt;MerchantData&gt; result;
        
        // Instantiate the database connector.
        using (DatabaseConnector databaseConnector = new DatabaseConnector(connectionString)) {

          // Get the merchant data.
          result = databaseConnector.ExecuteReader&lt;MerchantData&gt;(query);
        }
        
        // Parse each row returned.
        foreach (MerchantData merchantData in result) {
        
          int merchantId = merchantData.MerchantId;
          string merchantName = merchantData.MerchantName;
          
          // The property MerchantConfiguration is populated automatically.
          
          bool isEnabled = merchantData.MerchantConfiguration.IsEnabled;
          string domain = merchantData.MerchantConfiguration.MerchantDomain;
          
          .
          .
          .
        }
      </code>
      <para>The following example shows how to load data with a collection as parameter for an 'IN' clause.</para>
      <code lang="C#">
        // Query to load MerchantData.
        string query = @"SELECT Name FROM Merchant WHERE MerchantKey IN (@MerchantKeyCollection)";

        // A collection to be used as the query MerchantKeyCollection parameter.
        IEnumerable&lt;Guid&gt; merchantKeyCollection = new Guid[] { Guid.Parse("fee2437e-c810-4c2b-a836-5f619f80bb76"), Guid.Parse("c5d66001-8a39-4a04-a22c-d3a190018c46") };

        IEnumerable&lt;MerchantData&gt; result;
        
        // Instantiate the database connector.
        using (DatabaseConnector databaseConnector = new DatabaseConnector(connectionString)) {

          // Get the merchant data.
          result = databaseConnector.ExecuteReader&lt;MerchantData&gt;(query, new { MerchantKeyCollection = merchantKeyCollection });
        }
      </code>
    </example>
        </member>
        <member name="M:Dlp.Connectors.DatabaseConnector.ExecuteReaderAsEnumerable``1(System.String,System.Object,System.Boolean)">
            <summary>
            Sends the query to be executed by the database and return a disposable enumerable of type T
            </summary>
            <typeparam name="T">Type of the object instance to be returned.</typeparam>
            <param name="query">Query to be executed. The parameter is mandatory.</param>
            <param name="parameters">Query parameters, as a dynamic object, following the format: new {Param1 = value1, Param2 = value2, ...}.</param>
            <returns>Returns a list of type T with the retrieved data.</returns>
            <exception cref="T:System.ArgumentNullException">Missing the query parameter.</exception>
            <exception cref="T:System.InvalidCastException" />
            <exception cref="T:System.Data.SqlClient.SqlException" />
            <exception cref="T:System.IO.IOException" />
            <exception cref="T:System.InvalidOperationException" />
            <exception cref="T:System.ObjectDisposedException" />
            <example>
      <para>The following example shows how to use the ExecuteReader method to get a list of rows.</para>
      <code lang="C#">
        // Query to load transactions.
        string query = @"SELECT TransactionId, AmountInCents FROM Transaction WHERE CreateDate &gt;= @SearchStartDate AND CreateDate &lt; @SearchEndDate;";

        // Instantiate the database connector.
        using (DatabaseConnector databaseConnector = new DatabaseConnector(connectionString)) {

          // Return a list of transactions, sorted by the CreateDate column in descending order.
          IEnumerable&lt;Transaction&gt; result = databaseConnector.ExecuteReader&lt;Transaction&gt;(query, new { SearchStartDate = searchStartDate, SearchEndDate = searchEndDate });
        }
      </code>
      <para>The following example shows how to load data with inner join to fill an entity.</para>
      <code lang="C#">
        // Query to load MerchantData.
        string query = @"SELECT Merchant.MerchantId, Merchant.MerchantName, MerchantConfiguration.IsEnabled, MerchantConfiguration.MerchantDomain
                         FROM Merchant
                         INNER JOIN MerchantConfiguration ON Merchant.MerchantId = MerchantConfiguration.MerchantId";

        IEnumerable&lt;MerchantData&gt; result;
        
        // Instantiate the database connector.
        using (DatabaseConnector databaseConnector = new DatabaseConnector(connectionString)) {

          // Get the merchant data.
          result = databaseConnector.ExecuteReader&lt;MerchantData&gt;(query);
        }
        
        // Parse each row returned.
        foreach (MerchantData merchantData in result) {
        
          int merchantId = merchantData.MerchantId;
          string merchantName = merchantData.MerchantName;
          
          // The property MerchantConfiguration is populated automatically.
          
          bool isEnabled = merchantData.MerchantConfiguration.IsEnabled;
          string domain = merchantData.MerchantConfiguration.MerchantDomain;
          
          .
          .
          .
        }
      </code>
      <para>The following example shows how to load data with a collection as parameter for an 'IN' clause.</para>
      <code lang="C#">
        // Query to load MerchantData.
        string query = @"SELECT Name FROM Merchant WHERE MerchantKey IN (@MerchantKeyCollection)";

        // A collection to be used as the query MerchantKeyCollection parameter.
        IEnumerable&lt;Guid&gt; merchantKeyCollection = new Guid[] { Guid.Parse("fee2437e-c810-4c2b-a836-5f619f80bb76"), Guid.Parse("c5d66001-8a39-4a04-a22c-d3a190018c46") };

        IEnumerable&lt;MerchantData&gt; result;
        
        // Instantiate the database connector.
        using (DatabaseConnector databaseConnector = new DatabaseConnector(connectionString)) {

          // Get the merchant data.
          result = databaseConnector.ExecuteReader&lt;MerchantData&gt;(query, new { MerchantKeyCollection = merchantKeyCollection });
        }
      </code>
    </example>
        </member>
        <member name="M:Dlp.Connectors.DatabaseConnector.BulkInsert(System.String,System.Collections.IEnumerable,System.Data.SqlClient.SqlBulkCopyOptions)">
            <summary>
            Copys all elements of a collection to a destination table.
            </summary>
            <param name="tableName">Target table name.</param>
            <param name="collection">Collection containing the data to be pushed to the database. The elements properties must have the same name as the destination columns.</param>
            <param name="sqlBulkCopyOptions">Rule to be used by Sql Server before insert the data.</param>
            <example>
      <para>The following example shows how to insert a collection of rows to a table using the BulkInsert method.</para>
      <code lang="C#">
        // Collection containing the data to be pushed to the database.
        IEnumerable&lt;ShoppingCartItem&gt; shoppingCardItemList = SomeMethodToRetrieveTheData();

        // Table name where the data will be saved.
        string targetTableName = "ShoppingCartItem";

        // Instantiate the database connector.
        using (DatabaseConnector databaseConnector = new DatabaseConnector(connectionString)) {
          
          // Save all the elements to the specified table, validating the foreing keys constraints.
          databaseConnector.BulkInsert(targetTableName, shoppingCardItemList, SqlBulkCopyOptions.CheckConstraints);
        }
      </code>
    </example>
        </member>
        <member name="M:Dlp.Connectors.DatabaseConnector.AddParameters(System.String,System.Data.SqlClient.SqlCommand,System.Object)">
            <summary>
            Adiciona os parâmetros para a execução da query.
            </summary>
            <param name="query">Query a ser enviada para execução.</param>
            <param name="command">Command responsável pela execução da query.</param>
            <param name="parameters">Objeto contendo as propriedades a serem mepeadas para os parâmetros.</param>
        </member>
        <member name="M:Dlp.Connectors.DatabaseConnector.InternalReader``1(System.Data.SqlClient.SqlDataReader)">
            <summary>
            Executa a leitura dos dados de um DataReader.
            </summary>
            <typeparam name="T">Tipo do objeto que será preenchido.</typeparam>
            <param name="reader">Reader a ser utilizado para obter as informações do banco de dados.</param>
            <returns>Retorna uma coleção com os registros do tipo T encontrados no banco de dados.</returns>
        </member>
        <member name="M:Dlp.Connectors.DatabaseConnector.InternalReaderFetchAll``1(System.Data.SqlClient.SqlDataReader)">
            <summary>
            Executa a leitura dos dados de um DataReader.
            </summary>
            <typeparam name="T">Tipo do objeto que será preenchido.</typeparam>
            <param name="reader">Reader a ser utilizado para obter as informações do banco de dados.</param>
            <returns>Retorna uma coleção com os registros do tipo T encontrados no banco de dados.</returns>
        </member>
        <member name="M:Dlp.Connectors.DatabaseConnector.ParseProperty(System.Type,System.Reflection.PropertyInfo[],System.Data.DataTable,System.Object,System.String,System.Object,System.Int32,System.Collections.Generic.IList{System.String})">
            <summary>
            Tenta mapear uma coluna encontrada no banco de dados para uma propriedade do objeto especificado.
            </summary>
            <param name="returnType">Tipo do objeto para onde os dados encontrados no banco serão mapeados.</param>
            <param name="schemaTable">Objeto contendo os metadados da tabela a qual a coluna encontrada pertence.</param>
            <param name="returnInstance">Instancia do objeto que será retornado.</param>
            <param name="columnName">Nome da coluna encontrada no banco de dados.</param>
            <param name="databaseValue">Valor encontrado no banco de dados.</param>
            <param name="ordinal">Índice da coluna. Usado para identificar a qual tabela pertence um campo quando houver joins.</param>
            <returns>Retorna true caso seja encontrada uma propriedade para a coluna, ou false, caso contrário.</returns>
        </member>
        <member name="M:Dlp.Connectors.DatabaseConnector.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Starts a database transaction.
            </summary>
            <param name="isolationLevel">Transaction isolation level. Default: ReadUncommitted.</param>
            <returns>Returns the SqlTransaction created for this connector.</returns>
        </member>
        <member name="M:Dlp.Connectors.DatabaseConnector.Commit">
            <summary>
            Commits the database transaction.
            </summary>
        </member>
        <member name="M:Dlp.Connectors.DatabaseConnector.Rollback">
            <summary>
            Rolls back a transaction from a pending state.
            </summary>
        </member>
        <member name="M:Dlp.Connectors.DatabaseConnector.BeginGlobalTransaction(System.String)">
            <summary>
            Starts a database transaction. This static method reaches all the DatabaseConnector instances regardless they expect a database transaction or not.
            </summary>
            <param name="connectionString">The connection used to open the SQL Server database.</param>
            <returns>Returns the created SqlTransaction.</returns>
            <exception cref="T:System.ArgumentNullException">Missing the connection string parameter.</exception>
            <example>
      <para>The following example shows how to create database transactions.</para>
      <code lang="C#">
        public void CreateMerchant(MerchantData merchantData) {
        
          // Starts a new database transaction.
          DatabaseConnector.BeginGlobalTransaction(this.ConnectionString);
        
          try {
            // Variable to store the id of the inserted data.
            int merchantId;
          
            // Instantiates the database connector.
            using(DatabaseConnector databaseConnector = new DatabaseConnector()) {
          
              // Creates the merchant in database.
              merchantId = databaseConnector.ExecuteScalar&lt;int&gt;(createMerchantQuery, merchantData);
            }
            
            // Creates the sandbox affiliations for the new merchant.
            this.CreateSandboxAffiliationsForMerchant(merchantId);
          
            // Persists the pending operations to the database.
            DatabaseConnector.CommitGlobalTransaction();
          }
          catch(Exception ex) {
        
            // Rolls back any pending operation.
            DatabaseConnector.RollbackGlobalTransaction();
          
            // Do exception treatment.
          
            .
            .
            .
          }
        }
        
        private void CreateSandBoxAffiliationsForMerchant(int merchantId) {
        
          // Checks if a valid merchantId was received.
          if(merchantId &lt;= 0) { throw new ArgumentException("The merchantId must be greater than zero."); }
          
          // Instantiates the database connector. This instance has no reference to databaseTransactions, but it is managed internally.
          using (DatabaseConnector databaseConnector = new DatabaseConnector(this.ConnectionString)) {
          
            databaseConnector.ExecuteNonQuery(createSandboxAffiliationsQuery, new { MerchantId = merchantId });
          }
        }
        
      </code>
    </example>
        </member>
        <member name="M:Dlp.Connectors.DatabaseConnector.CommitGlobalTransaction">
            <summary>
            Commits the database transaction. This static method reaches all the DatabaseConnector instances regardless they expect a database transaction or not.
            </summary>
            <example>
      <para>The following example shows how to create database transactions.</para>
      <code lang="C#">
        public void CreateMerchant(MerchantData merchantData) {
        
          // Starts a new database transaction.
          DatabaseConnector.BeginGlobalTransaction(this.ConnectionString);
        
          try {
            // Variable to store the id of the inserted data.
            int merchantId;
          
            // Instantiates the database connector.
            using(DatabaseConnector databaseConnector = new DatabaseConnector()) {
          
              // Creates the merchant in database.
              merchantId = databaseConnector.ExecuteScalar&lt;int&gt;(createMerchantQuery, merchantData);
            }
            
            // Creates the sandbox affiliations for the new merchant.
            this.CreateSandboxAffiliationsForMerchant(merchantId);
          
            // Persists the pending operations to the database.
            DatabaseConnector.CommitGlobalTransaction();
          }
          catch(Exception ex) {
        
            // Rolls back any pending operation.
            DatabaseConnector.RollbackGlobalTransaction();
          
            // Do exception treatment.
          
            .
            .
            .
          }
        }
        
        private void CreateSandBoxAffiliationsForMerchant(int merchantId) {
        
          // Checks if a valid merchantId was received.
          if(merchantId &lt;= 0) { throw new ArgumentException("The merchantId must be greater than zero."); }
          
          // Instantiates the database connector. This instance has no reference to databaseTransactions, but it is managed internally.
          using (DatabaseConnector databaseConnector = new DatabaseConnector(this.ConnectionString)) {
          
            databaseConnector.ExecuteNonQuery(createSandboxAffiliationsQuery, new { MerchantId = merchantId });
          }
        }
        
      </code>
    </example>
        </member>
        <member name="M:Dlp.Connectors.DatabaseConnector.RollbackGlobalTransaction">
            <summary>
            Rolls back a transaction from a pending state. This static method reaches all the DatabaseConnector instances regardless they expect a database transaction or not.
            </summary>
            <example>
      <para>The following example shows how to create database transactions.</para>
      <code lang="C#">
        public void CreateMerchant(MerchantData merchantData) {
        
          // Starts a new database transaction.
          DatabaseConnector.BeginGlobalTransaction(this.ConnectionString);
        
          try {
            // Variable to store the id of the inserted data.
            int merchantId;
          
            // Instantiates the database connector.
            using(DatabaseConnector databaseConnector = new DatabaseConnector()) {
          
              // Creates the merchant in database.
              merchantId = databaseConnector.ExecuteScalar&lt;int&gt;(createMerchantQuery, merchantData);
            }
            
            // Creates the sandbox affiliations for the new merchant.
            this.CreateSandboxAffiliationsForMerchant(merchantId);
          
            // Persists the pending operations to the database.
            DatabaseConnector.CommitGlobalTransaction();
          }
          catch(Exception ex) {
        
            // Rolls back any pending operation.
            DatabaseConnector.RollbackGlobalTransaction();
          
            // Do exception treatment.
          
            .
            .
            .
          }
        }
        
        private void CreateSandBoxAffiliationsForMerchant(int merchantId) {
        
          // Checks if a valid merchantId was received.
          if(merchantId &lt;= 0) { throw new ArgumentException("The merchantId must be greater than zero."); }
          
          // Instantiates the database connector. This instance has no reference to databaseTransactions, but it is managed internally.
          using (DatabaseConnector databaseConnector = new DatabaseConnector(this.ConnectionString)) {
          
            databaseConnector.ExecuteNonQuery(createSandboxAffiliationsQuery, new { MerchantId = merchantId });
          }
        }
        
      </code>
    </example>
        </member>
        <member name="M:Dlp.Connectors.DatabaseConnector.Close">
            <summary>
            Closes the connection to the database. This is the preferred method of closing any open connection.
            </summary>
        </member>
        <member name="M:Dlp.Connectors.DatabaseConnector.Dispose">
            <summary>
            Disposes the DatabaseConnector instance.
            </summary>
        </member>
        <member name="M:Dlp.Connectors.DatabaseConnector.Dispose(System.Boolean)">
            <summary>
            Disposes the DatabaseConnector instance.
            </summary>
            <param name="disposing">Flag indicating the dispose process.</param>
        </member>
        <member name="T:Dlp.Connectors.PagedResult`1">
            <summary>
            Result for a paged query.
            </summary>
            <typeparam name="T">Type of the objects to be returned.</typeparam>
        </member>
        <member name="P:Dlp.Connectors.PagedResult`1.TotalRecords">
            <summary>
            Gets the total number of records available for current query.
            </summary>
        </member>
        <member name="P:Dlp.Connectors.PagedResult`1.CurrentPage">
            <summary>
            Gets the page number for the returned data.
            </summary>
        </member>
        <member name="P:Dlp.Connectors.PagedResult`1.TotalPages">
            <summary>
            Gets the number of pages for current query.
            </summary>
        </member>
        <member name="P:Dlp.Connectors.PagedResult`1.Data">
            <summary>
            Gets the returned records for current page.
            </summary>
        </member>
        <member name="T:Dlp.Connectors.SortDirection">
            <summary>
            Enumerates all the available options for sorting queries result.
            </summary>
        </member>
        <member name="F:Dlp.Connectors.SortDirection.DESC">
            <summary>
            Organize the result of a query in a descending order.
            </summary>
        </member>
        <member name="F:Dlp.Connectors.SortDirection.ASC">
            <summary>
            Organize the result of a query in as acending order.
            </summary>
        </member>
        <member name="M:Dlp.Connectors.ICacheConnector.Connect">
            <summary>
            Connects to the cache service.
            </summary>
        </member>
        <member name="M:Dlp.Connectors.ICacheConnector.IsConnected">
            <summary>
            Checks if the cache service is connected.
            </summary>
            <returns>Returns true if we are connected to the cache service.</returns>
        </member>
        <member name="M:Dlp.Connectors.ICacheConnector.Disconnect">
            <summary>
            Disconnects from the cache service.
            </summary>
        </member>
        <member name="M:Dlp.Connectors.ICacheConnector.Set``1(System.String,``0,System.Int32)">
            <summary>
            Adiciona um atualiza um item existente no cache.
            </summary>
            <typeparam name="T">Tipo do item a ser inserido/atualziado.</typeparam>
            <param name="key">Nome único no cache.</param>
            <param name="item">Objeto a ser inserido/atualizado.</param>
            <param name="itemExpirationInMinutes">Quanto tempo o item deverá permanecer no cache.</param>
            <returns>Retorna true caso a operação seja realizada com sucesso.</returns>
        </member>
        <member name="M:Dlp.Connectors.ICacheConnector.GetByKey``1(System.String)">
            <summary>
            Obtém um item do cache a partir do nome.
            </summary>
            <typeparam name="T">Tipo do objeto a ser retornado.</typeparam>
            <param name="key">Nome do objeto no cache.</param>
            <returns>Retorna um objeto do tipo T, encontrado no cache, ou default(T), caso o item não exista.</returns>
        </member>
        <member name="T:Dlp.Connectors.OutputEventArgs">
            <summary>
            Represents the output of the DatabaseConnector. Useful as a verbose log.
            </summary>
        </member>
        <member name="P:Dlp.Connectors.OutputEventArgs.EventDateTime">
            <summary>
            Gets or sets the date and time of the event.
            </summary>
        </member>
        <member name="P:Dlp.Connectors.OutputEventArgs.OperationName">
            <summary>
            Gets or sets the name of the method that is writing the event.
            </summary>
        </member>
        <member name="P:Dlp.Connectors.OutputEventArgs.Description">
            <summary>
            Gets the description of the event.
            </summary>
        </member>
    </members>
</doc>
